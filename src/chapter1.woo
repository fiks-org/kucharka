.Chapter Úvod
  label: chap-intro
  index: uvod


Vítej ve FIKSím průvodci světem teoretické informatiky. Cílem této kuchařky je přinést ti znalosti
některých základních i pokročilých algoritmů a datových struktur. A to vše nějakou rozumnou formou
vhodnou pro středoškoláky. Materiály se ti mohou hodit při mnohých úlohách FIKSu, ať už u Sfing,
kde ti pomohou s algoritmem nebo u teoretických úloh, kde ti ukážou jakou formou si představujeme
důkazy a můžeš se sem pak odkazovat. U většiny částí pak najdeš odkazy na další materiály, pokud by
tě téma zajímalo víc. A pokud bys měl jakékoli otázky neboj se zeptat, třeba na "našem discordu"@1.
  1:
    link: https://www.discord.gg/Pc2w7hp


Začneme hodně ze široka a od základů si zadefinujeme postupně všechny pojmy, které budeme používat.
Pokud si myslíš, že už je umíš, super, jenom se koukni jestli si pod tím představuješ ten samý význam,
jako bude používaný v těchto materiálech. Někdy se může stát, že si nějaký pojem zadefinujeme jako
speciální případ toho, co už znáš, nebo naopak budeme víc obecní.


% .Section FIKS
%   label: fiks
%
%
% Ale nejdřív nějaká selfpromotion. Co je to vlastně ten FIKS?


% .Definition:
%   label: def-fiks
%   index: FIKS
%   title: FIKS
%
%   FIKS neboli Fitácký Informatický Korespondenční Seminář je jak už název napovídá korespondeční
%   seminář, organizovaný hlavně studenty z "FIT ČVUT"@1. Určený je hlavně pro středoškoláky, které si
%   klade za cíl naučit nebo aspon seznámit s algoritmickými problémy a základy teoretické informatiky.
%     1:
%       link: https://fit.cvut.cz


.Chapter Úvod do algoritmů
  label: chap-intro-algo


Co je to vůbec algoritmus?


.Definition:
  title: Algoritmus
  label: def-algorithm
  index: algoritmus

  Algoritmus je přesně daný postup, jak z nějakého vstupu získat nějaký výsledek.


Pokud nějaký algoritmus používáme, tak chceme věřit, že funguje jak má. Na to slouží několik vlastností, které
od algoritmu požadujeme.


.enumerate:

  .item:

    "Správnost".notion.1 algoritmu - že opravdu vždy vrátí to, co od něj očekáváme.
      1:
        index: algoritmus!správnost

  .item:

    "Konečnost".notion.1 algoritmu - že se algoritmus nezacyklí a vždy skončí s nějakým výsledkem.
      1:
        index: algoritmus!konečnost

  .item:

    "Časová složitost".notion.1 algoritmu - kolik kroků algoritmus vykoná na základě velikosti vstupu.
      1:
        index: algoritmus!časová složitost

  .item:

    "Pamětová složitost".notion.1 algoritmu - jak velkou část paměti využije.
      1:
        index: algoritmus!pamětová složitost



.Section Časová složitost
  label: sec-casova-slozitost


Pamětová a časová složitost se běžně udávají jako $\lanO$, $\Omega$ nebo $\Theta$. Co to ale znamená?


.Definition:
  label: def-asymptoticka-horni-mez
  index: mez!asymptotická horní
  title: Asymptotická horní mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky shora omezená $g$ právě tehdy, když existují nějaké konstanty $c > 0$ a $x_0$ takové,
  že pro všechna $x > x_0$ platí nerovnost $|f(x)| \le |c*g(x)|$.


  Značíme $f(x) = \lanO(g(x))$.


.Definition:
  label: def-asymptoticka-dolni-mez
  index: mez!asymptotická dolní
  title: Asymptotická dolní mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky zdola omezená $g$ právě tehdy, když existují nějaké konstanty $c > 0$ a $x_0$ takové,
  že pro všechna $x > x_0$ platí nerovnost $|f(x)| \ge |c*g(x)|$.


  Značíme $f(x) = \Omega(g(x))$.


Pomocí těch, pak můžeme definovat asymptotickou těsnou mez.


.Definition:
  label: def-asymptoticka-tesna-mez
  index: mez!asymptotická těsná
  title: Asymptotická těsná mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky ekvivalentní $g$ právě tehdy, když
  $f(x) = \lanO(g(x)) \land f(x) = \Omega(g(x))$.


  Značíme $f(x) = \Theta(g(x))$.


.Remark:
  label: rem-asymptotika-mnoziny

  Běžně se lze setkat i s notací $f(x) \in \lanO(g(x))$.
  Pak se $\lanO(g(x))$ považuje za množinu všech funkcí, které jsou asymptoticky shora omezené $g$.


Ukážeme si, jak tyto pojmy líp interpretovat na příkladech.


.Example:
  title: Linární vyhledávání
  label: example-asymptotika-lin-search

  Mějme pole $a$ o $n$ prvcích. Chceme v něm najít $x$. Nejjednodužší způsob jak ho najít je proiterovat
  všechny prvky.

  !pseudocode:

    \PROCEDURE{LinSearch}{$a, n, x$}
      \STATE found = FALSE
      \FOR {$i = 1, \dots, n $ }
        \IF {$a_i == x$}
          \STATE found = \TRUE
        \ENDIF
      \ENDFOR
      \RETURN found
    \ENDPROCEDURE

  Tomuto se říká "lineární vyhledávání".notion.1. To naznačuje, že by algoritmus měl být lineární
  neboli jeho časová složitost je $\lanO(n)$.
    1:
      index: vyhledávání!lineární


  Jak jsme na to ale přišli? Podívejme se pořádně na kód.

  .itemize:

    .item:

      Řádek 2 se provede jenom jednou, přiřazuje se konstanta, takže zatím máme $\lanO(1)$.

    .item:

      Následuje forloop, jehož obsah se provede $n$-krát.

    .item:

      Ve forloopu je jedno porovnání a jedno přiřazení, porovnání se provede vždy $\implies n*\lanO(1) = \lanO(n)$.
      V nejhorším případě bude porovnání vždy pravdivé a přiřazení se provede také vždy. Proto opět $\lanO(n)$.

    .item:

      Pak je jenom return ($\lanO(1)$)

  Výsledná časová složitost je součet všech těchto hodnot $\lanO(1) + \lanO(n) + \lanO(n) + \lanO(1) = \lanO(n)$
  "Důkaz součtu ponecháme jako cvičení pro čtenáře".footnote


.Exercise:
  title: Linární vyhledávání 2
  label: example-asymptotika-lin-search-2

  Máme stále stejný problém, ale trochu si upravíme algoritmus.

  !pseudocode:

    \PROCEDURE{LinSearch2}{$a, n, x$}
      \FOR {$i = 1, \dots, n $ }
        \IF {$a_i == x$}
          \RETURN \TRUE
        \ENDIF
      \ENDFOR
      \RETURN \FALSE
    \ENDPROCEDURE

  Jak se změní časová složitost tohoto algoritmu oproti předchozímu?


.Solution:
  title: Řešení cvičení .reference:example-asymptotika-lin-search-2
  label: sol-asymptotika-lin-search-2

  Nezmění se. V nejhorším případě ($x$ v poli $a$ není) se porovnání opět provede $n$-krát.
  Takže časová složitost zůstane $\lanO(n)$.


Všimněte si, že se v popisu složitosti vyskytuje $n$. Není to jen tak ledajaké $n$ má spojitost
s naším problémem. V tomto případě se jedná o počet prvků v poli. Kdybychom této hodnotě říkali $l$,
bude časová složitost lineárního vyhledávání $\lanO(l)$.


Proč je důležité říkat, co ty písmenka znamenají si ukážeme na příkladu.


.Example:
  label: example-asymptotika-scitani
  title: Sčítání

  Mějme dvě $n$ ciferná čísla $a$ a $b$. Tyto čísla chceme sečíst, použijeme na to algorismus písemného
  sčítání podsebe, který známe ze základní školy.

  .align:
    
    a&\\
    b&\\
    \hline
    c&

  Řekněme si konrétní $a = 12345$ a $b = 00678$.

  .align:

    12345&\\
    00678&\\
    \hline
    13023&

  Museli jsme každou cifru $a$ sečíst s odpovídající cifrou v $b$ a ještě s carry (cifra co přetekla).
  Řekněme, že sečíst dvě cifry je konstatní operace, pak složitost tohoto výpočtu je $\lanO(n)$.


To je celkem pomalé sčítání. Zvládneme to rychleji? Samozřejmě, pokud nebudeme uvažovat délku čísel, ale jeho
hodnotu, pak bude časová složitost sčítání jenom $\lanO(\log_{10}\max(a,b))$. To už vypadá líp. Ale algoritmus je to
pořád stejný. Proto je důležité uvádět na základě čeho složitost uvažujeme.



% Snad tohle jako přiblížení počítání složistosti pomohlo.


.Chapter Množiny
  label: chap-mnoziny

% TODO 

Když už se nakously množiny, tak si zavedeme nějaké pojmy o množinách.


.Definition:
  label: def-mnozina
  title: Množina
  index: množina

  Množina je matematický objekt neuspořádaných prvků. Můžete si ho představit třeba jako pytel s věcmi.
  Každá množina obsahuje prvky nějakého univerza $\UU$.

  
  Množina může být zadána jako

  .itemize:

    .item:

      výčet prvků, např. $\{1, 2, 3, 4, 5\}$

    .item:

      prvky univerza $\mathcal{U}$ splnující nějakou vlastnost $v$, např. $\{x \in \UU | v(x)\}$
