.Chapter Úvod do algoritmů
  label: chap-intro-algo


Co je to vůbec algoritmus?


.Definition:
  title: Algoritmus
  label: def-algorithm
  index: algoritmus

  Algoritmus je přesně daný postup, jak z nějakého vstupu získat nějaký výsledek.


Pokud nějaký algoritmus používáme, tak chceme věřit, že funguje jak má. Na to slouží několik vlastností, které
od algoritmu požadujeme.


.enumerate:

  .item:

    "Správnost".notion.1 algoritmu - že opravdu vždy vrátí to, co od něj očekáváme. Někdy uslyšíte i "korektnost".notion.2
      1:
        index: algoritmus!správnost
      2:
        index: algoritmus!korektnost

  .item:

    "Konečnost".notion.1 algoritmu - že se algoritmus nezacyklí a vždy skončí s nějakým výsledkem.
      1:
        index: algoritmus!konečnost

  .item:

    "Časová složitost".notion.1 algoritmu - kolik kroků algoritmus vykoná na základě velikosti vstupu.
      1:
        index: algoritmus!časová složitost

  .item:

    "Pamětová složitost".notion.1 algoritmu - jak velkou část paměti využije.
      1:
        index: algoritmus!pamětová složitost


S algoritmy většinou máme spojený ještě jeden pojem.


.Definition:
  title: Problém
  label: def-problem
  index: problém

  "Problém".notion někdy "výpočetní problém".notion je pojem z teoretické informatiky. Označuje
  formální úkol, z nějakého vstupu získat výstup. Odpověďět na nějakou otázku ohledně toho vstupu.


.Definition:
  title: Instance problému
  label: def-problem-instance
  index: problém!instance

  "Instance problému".notion je jeden konkrétní vstup nějakého problému.


A právě problémy jsou studovány, řešeny pomocí algoritmů nebo dokazováno, že jsou neřešitelné.
Pro každý problém může existovat vícero algoritmů.


Pokud jste někdy slyšli něco o těžkých problémech nebo o třídách problémů a chtěli byste se dozvědět více
nezoufejte. Také jim nějakou kapitolu věnujeme, zatím jsme ale u základů.


.Section Časová složitost
  label: sec-casova-slozitost


Pamětová a časová složitost se běžně udávají jako $\lanO$, $\Omega$ nebo $\Theta$. Co to ale znamená?


.Definition:
  label: def-asymptoticka-horni-mez
  index: mez!asymptotická horní
  title: Asymptotická horní mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky shora omezená $g$ právě tehdy, když existují nějaké konstanty $c > 0$ a $x_0$ takové,
  že pro všechna $x > x_0$ platí nerovnost $|f(x)| \le |c*g(x)|$.


  Značíme $f(x) = \lanO(g(x))$.


.Definition:
  label: def-asymptoticka-dolni-mez
  index: mez!asymptotická dolní
  title: Asymptotická dolní mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky zdola omezená $g$ právě tehdy, když existují nějaké konstanty $c > 0$ a $x_0$ takové,
  že pro všechna $x > x_0$ platí nerovnost $|f(x)| \ge |c*g(x)|$.


  Značíme $f(x) = \Omega(g(x))$.


Pomocí těch, pak můžeme definovat asymptotickou těsnou mez.


.Definition:
  label: def-asymptoticka-tesna-mez
  index: mez!asymptotická těsná
  title: Asymptotická těsná mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky ekvivalentní $g$ právě tehdy, když
  $f(x) = \lanO(g(x)) \land f(x) = \Omega(g(x))$.


  Značíme $f(x) = \Theta(g(x))$.


.Remark:
  label: rem-asymptotika-mnoziny

  Běžně se lze setkat i s notací $f(x) \in \lanO(g(x))$.
  Pak se $\lanO(g(x))$ považuje za množinu všech funkcí, které jsou asymptoticky shora omezené $g$.


Ukážeme si, jak tyto pojmy líp interpretovat na příkladech.


.Example:
  title: Linární vyhledávání
  label: example-asymptotika-lin-search

  Mějme pole $a$ o $n$ prvcích. Chceme v něm najít $x$. Nejjednodužší způsob jak ho najít je proiterovat
  všechny prvky.

  !pseudocode:

    \PROCEDURE{LinSearch}{$a, n, x$}
      \STATE found = FALSE
      \FOR {$i = 1, \dots, n $ }
        \IF {$a_i == x$}
          \STATE found = \TRUE
        \ENDIF
      \ENDFOR
      \RETURN found
    \ENDPROCEDURE

  Tomuto se říká "lineární vyhledávání".notion.1. To naznačuje, že by algoritmus měl být lineární
  neboli jeho časová složitost je $\lanO(n)$.
    1:
      index: vyhledávání!lineární


  Jak jsme na to ale přišli? Podívejme se pořádně na kód.

  .itemize:

    .item:

      Řádek 2 se provede jenom jednou, přiřazuje se konstanta, takže zatím máme $\lanO(1)$.

    .item:

      Následuje forloop, jehož obsah se provede $n$-krát.

    .item:

      Ve forloopu je jedno porovnání a jedno přiřazení, porovnání se provede vždy $\implies n*\lanO(1) = \lanO(n)$.
      V nejhorším případě bude porovnání vždy pravdivé a přiřazení se provede také vždy. Proto opět $\lanO(n)$.

    .item:

      Pak je jenom return ($\lanO(1)$)

  Výsledná časová složitost je součet všech těchto hodnot $\lanO(1) + \lanO(n) + \lanO(n) + \lanO(1) = \lanO(n)$
  "Důkaz součtu ponecháme jako cvičení pro čtenáře".footnote


.Exercise:
  title: Linární vyhledávání 2
  label: example-asymptotika-lin-search-2

  Máme stále stejný problém, ale trochu si upravíme algoritmus.

  !pseudocode:

    \PROCEDURE{LinSearch2}{$a, n, x$}
      \FOR {$i = 1, \dots, n $ }
        \IF {$a_i == x$}
          \RETURN \TRUE
        \ENDIF
      \ENDFOR
      \RETURN \FALSE
    \ENDPROCEDURE

  Jak se změní časová složitost tohoto algoritmu oproti předchozímu?


.Solution:
  title: Řešení cvičení .reference:example-asymptotika-lin-search-2
  label: sol-asymptotika-lin-search-2

  Nezmění se. V nejhorším případě ($x$ v poli $a$ není) se porovnání opět provede $n$-krát.
  Takže časová složitost zůstane $\lanO(n)$.


Všimněte si, že se v popisu složitosti vyskytuje $n$. Není to jen tak ledajaké $n$ má spojitost
s naším problémem. V tomto případě se jedná o počet prvků v poli. Kdybychom této hodnotě říkali $l$,
bude časová složitost lineárního vyhledávání $\lanO(l)$.


Proč je důležité říkat, co ty písmenka znamenají si ukážeme na příkladu.


.Example:
  label: example-asymptotika-scitani
  title: Sčítání

  Mějme dvě $n$ ciferná čísla $a$ a $b$. Tyto čísla chceme sečíst, použijeme na to algorismus písemného
  sčítání podsebe, který známe ze základní školy.

  .align:
    
    a&\\
    b&\\
    \hline
    c&

  Řekněme si konrétní $a = 12345$ a $b = 00678$.

  .align:

    12345&\\
    00678&\\
    \hline
    13023&

  Museli jsme každou cifru $a$ sečíst s odpovídající cifrou v $b$ a ještě s carry (cifra co přetekla).
  Řekněme, že sečíst dvě cifry je konstatní operace, pak složitost tohoto výpočtu je $\lanO(n)$.


To je celkem pomalé sčítání. Zvládneme to rychleji? Samozřejmě, pokud nebudeme uvažovat délku čísel, ale jeho
hodnotu, pak bude časová složitost sčítání jenom $\lanO(\log_{10}\max(a,b))$. To už vypadá líp. Ale algoritmus je to
pořád stejný. Proto je důležité uvádět na základě čeho složitost uvažujeme.


.Remark:
  label: rem-asymptotika-porovnani
  title: Porovnání horních mezí

  Většinou chceme algoritmus co nejefektivnější (nejmenší časovou složitost). Ukážeme si
  vybrané funkce a seřadíme je tak, že pro každou platí, že je "asymptoticky zhora omezená"#def-asymptoticka-horni-mez
  všemi funkcemi napravo.

  $1, \log n, \sqrt{n}, n, n\log n, n \sqrt{n}, n^2, n^3, 2^n, n!$

  !!!TODO!!!

  .table:
    columns: l|rrrrrrrrr

    .row:

      $n =$

      1

      10

      100

      $10^4$

      $10^5$

      $10^6$

      $10^7$

      $10^9$

      $10^12$

    .row:

      1

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

    .row:

      $\log n $

      $\SI{150}{ns}$

      $\SI{500}{ns}$

      $\SI{1}{µs}$

      $\SI{2}{µs}$

      $\SI{1}{ms}$

      $\SI{1.2}{ms}$

      $\SI{1.4}{ms}$

      $\SI{1.8}{ms}$

      $\SI{2.4}{ms}$

    .row:

      $\sqrt{n}$

      $\SI{150}{ns}$

      $\SI{190}{µs}$

      $\SI{600}{µs}$

      $\SI{6}{ms}$

      $\SI{19}{ms}$

      $\SI{150}{ns}$

      $\SI{190}{ms}$

      $\SI{1.9}{s}$

      $\SI{1}{minuta}$

    .row:

      $n$

      $\SI{150}{ns}$

      $\SI{600}{µs}$

      $\SI{6}{ms}$

      $\SI{600}{ms}$

      $\SI{6}{s}$

      $\SI{1}{minuta}$

      $\SI{10}{minut}$

      $\SI{16.3}{hodin}$

      $\SI{2}{roky}$

    .row:

      $n*\log n$

      $\SI{150}{ns}$

      $\SI{2}{ms}$

      $\SI{40}{ms}$

      todo!!!!


.Section Paměťová složitost
  label: sec-pametova-slozitost

Do teď jsme se bavili o složitosti časové, ale na začátku kapitoly jsme zmiňovali i paměťovou složitost.
Pojďme se na ní kouknout podrobněji.


Stejně jako u složitosti časové nás většinou nezajímá kolik přesně paměti algoritmus zabere, ale spíše je
pro nás důležité jaký vztah má využití paměti v závislosti na vstupu. To se opět vyjadřuje pomocí asymptotických mezí
"$\lanO$"#def-asymptoticka-horni-mez, "$\Omega$"#def-asymptoticka-dolni-mez a "$\Theta$"#def-asymptoticka-tesna-mez.


Stejně jako u časové složitosti vyjadřujeme paměťovou složitost jako závislost na vstupu. A opět záleží, co jako vstup použijeme.


.Example:
  label: example-pametova-slozitost-matice
  title: Sčítání matic

  Mějme na vstupu dvě matice velikosti $n×n$ $\mA$ a $\mB$. Tyto dvě matice chceme sečíst. "Pokud nevíte, co jsou matice
  zatím si je můžete představit jako mřížky s čísly a jejich sčítání tak, že číslo na pozici $i,j$ v matici $\mA$ sečtu
  s číslem na pozici $i,j$ v matici $\mB$. Nebo koukněte na "wikipedii".reference.1.".footnote
    1:
      link: https://cs.wikipedia.org/wiki/S%C4%8D%C3%ADt%C3%A1n%C3%AD_matic


  Paměťová složitost jednoduchého součtu bude $\lanO(1)$. Protože využijeme jenom paměť na uložení výsledku.


  Ale také by se dala uvézt jako $\lanO(n^2)$, což vypadá mnohem hůř, ale také je to správně. V tomto případě
  totiž nevzahujeme využitou paměť k velikosti vstupu, ale k nějaké jeho vlastnosti. I při tomto přístupu se však
  můžeme setkat s tím, že by byla paměťová složitost označena za $\lanO(1)$ a to proto, že se uvažuje pouze paměť
  využitá navíc oproti velikosti vstupu a výstupu.


Časová a paměťová složitost jsou tedy dvě vlastnosti algoritmu. A nastává logická otázka, mají spolu něco společného?
Ze znalosti jedné vlastnosti toho moc o druhé říci nemůžeme. Ale aspoň nějakou spojitost mají.


.Theorem:
  title: Vztah časové a paměťové složitosti
  label: thm-cas-vs-pamet-slozitost

  Paměťová složitost algoritmu je shora omezená složitostí časovou.


.Proof:
  title: Důkaz věty .reference:thm-cas-vs-pamet-slozitost
  label: proof-cas-vs-pamet-slozitost

  Celkem přímočarý a intuitivní. Za čas $t$ nemohu použít víc jak $\lanO(t)$ paměťových buněk.




% Snad tohle jako přiblížení počítání složistosti pomohlo.


