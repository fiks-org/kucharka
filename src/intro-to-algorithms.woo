.Chapter Úvod do algoritmů
  label: chap-intro-algo


Co je to vůbec algoritmus?


.Definition:
  title: Algoritmus
  label: def-algorithm
  index: algoritmus

  Algoritmus je přesně daný postup, jak z nějakého vstupu získat nějaký výsledek.


Pokud nějaký algoritmus používáme, tak chceme věřit, že funguje jak má. Na to slouží několik vlastností, které
od algoritmu požadujeme.


.enumerate:

  .item:

    "Správnost".notion.1 algoritmu - že opravdu vždy vrátí to, co od něj očekáváme. Někdy uslyšíte i "korektnost".notion.2
      1:
        index: algoritmus!správnost
      2:
        index: algoritmus!korektnost

  .item:

    "Konečnost".notion.1 algoritmu - že se algoritmus nezacyklí a vždy skončí s nějakým výsledkem.
      1:
        index: algoritmus!konečnost

  .item:

    "Časová složitost".notion.1 algoritmu - kolik kroků algoritmus vykoná na základě velikosti vstupu.
      1:
        index: algoritmus!časová složitost

  .item:

    "Pamětová složitost".notion.1 algoritmu - jak velkou část paměti využije.
      1:
        index: algoritmus!pamětová složitost


S algoritmy většinou máme spojený ještě jeden pojem.


.Definition:
  title: Problém
  label: def-problem
  index: problém

  "Problém".notion někdy "výpočetní problém".notion je pojem z teoretické informatiky. Označuje
  formální úkol, z nějakého vstupu získat výstup. Odpověďět na nějakou otázku ohledně toho vstupu.


.Definition:
  title: Instance problému
  label: def-problem-instance
  index: problém!instance

  "Instance problému".notion je jeden konkrétní vstup nějakého problému.


A právě problémy jsou studovány, řešeny pomocí algoritmů nebo dokazováno, že jsou neřešitelné.
Pro každý problém může existovat vícero algoritmů.


Pokud jste někdy slyšli něco o těžkých problémech nebo o třídách problémů a chtěli byste se dozvědět více
nezoufejte. Také jim nějakou kapitolu věnujeme, zatím jsme ale u základů.


.Section Matematická notace
  label: sec-math-notation

Předtím než se pustíme do prohledávání všech možných zákoutí algoritmů, datových struktur,
analýzy časových a paměťových složitostí a mnohé dalšího, rádi bychom čtenáře obeznámili
se základní matematikou, kterou v textu budeme používat.


.Subsection Matematika není jenom o počítání
  label: subsec-math-is-not-counting

Na základní a střední škole se studenti seznamují s matematikou jako s předmětem,
ve kterém se pouze počítá podle vzorečků, které paní učitelka napsala na tabuli,
a které vymysleli nějací chytří lidé, a jejichž správnost nás vůbec nemusí zajímat.
Byť toto může být obecné přesvědčení mnoha lidí, schopnost počítat a upravovat výrazy
je jenom malou částí matematiky. V našem textu samozřejmě semtam těchto úprav využijeme,
více se ale budeme zaměřovat na důkazy správnosti našich tvrzení. K tomu si potřebujeme
představit několik konceptů a notace, které budeme využívat. Je-li čtenář již obeznámen
s pojmy jako:


.itemize:

  .item:

    důkaz přímý, důkaz sporem a důkaz indukcí,

  .item:

    výrokové spojky $\land, \lor, \Rightarrow, \Leftrightarrow$ a kvantifikátory $\forall, \exists$,

  .item:

    množiny, uspořádané množiny a množinové operace $\cap, \cup, \oplus, \setminus$,

  .item:

    zobrazení a funkce


věříme, že může tuto sekci přeskočit a navázat na další sekci .reference:sec-casova-slozitost. V opačném
případě doporučujeme alespoň rychle prolítnout touto sekcí, abyste se obeznámili alespoň s použitým značením.


.Subsection Výroková a predikátová logika
  label: subsec-math-vyrokova-a-predikatova-logika

Často chceme nějaké tvrzení či výrok o realitě zkoumat více do podrobna nebo si chceme být jistí, že je jednoznačně pochopitelný.
V matematice se ustálilo formulování myšlenek pomocí výrokové a predikátové logiky
To je silný aparát, který nám umožnujě s výroky pracovat. Je-li např. náš výrok "pokud bude pršet, vezmu si deštník".quoted,
můžeme tvrzení rozdělit na výrok $A$ "bude pršet".quoted a na výrok $B$ "vezmu si deštník".quoted a původní tvrzení
získat jejich spojením "pokud platí $A$, tak platí $B$".quoted. Možnost s výroky pracovat v obecnější míře a možnost
výroky spojovat pomocí "výrokových spojek".notion nám umožňuje "výroková logika".notion. Nebudeme se zde pouštět do
technických definic"zaprvé si myslíme, že pro studenta střední školy by to bylo kontraproduktivní, za druhé bychom
tím mohli zabít i klidně jeden celý akademický rok".footnote, uvedeme si zde proto pouze definici "výrokové formule".notion
a výrokových spojek.


.Definition:
  title: Výroková formule
  index: výroková formule
  label: def-vyrokova-formule

  Výroková formule (zkráceně také jenom "výrok".notion) je matematický objekt vzniklý
  následujícími 3 pravidly:

  .enumerate:

    .item:

      Jednoduchá oznamovací věta, o které "lze rozhodnout zda-li je či není pravdivá".notion
      a kterou zapisujeme symboly $A,B,\dots$, je výroková formule.

    .item:

      Jsou-li $A$ a $B$ výrokové formule, pak $\neg A, (A \land B), (A \lor B), (A \Rightarrow B), (A \Leftrightarrow B)$
      jsou výrokové formule.

    .item:

      Každý řetězec symbolů vzniknuvší podle prvních dvou pravidel je výroková formule.


.Definition:
  title: Pravdivostní hodnoty výrokových formulí
  index: výroková formule!pravdivostní hodnoty
  label: def-vyrokova-formule-hodnoty

  Uvažme dvě výrokové formule $A$ a $B$.

  .enumerate:

    .item:

      Výroková formule $\neg A$ (čteme "není pravda, že $A$".quoted.1) je pravdivá
      právě tehdy, když $A$ není pravdivé.
        1:
          index: logické!negace

    .item:

      Výroková formule $A \land B$ (čteme "$A$ a zároveň $B$".quoted.1 nebo jen "$A$ a $B$".quoted) je pravdivá
      právě tehdy, když výroky $A$ a $B$ jsou pravdivé.
        1:
          index: logické!a

    .item:

      Výroková formule $A \lor B$ (čteme "$A$ nebo $B$".quoted.1) je pravdivá
      právě tehdy, když alespoň jeden z výroků $A,B$ je pravdivý.
        1:
          index: logické!nebo

    .item:

      Výroková formule $A \Rightarrow B$ (čteme "$A$ implikuje $B$".quoted.1 nebo
      častěji "pokud $A$, pak $B$".quoted) je pravdivá právě tehdy, když
      je pravdivé $B$, nebo když $A$ není pravdivé.
        1:
          index: logické!implikace

    .item:

      Výroková formule $A \Leftrightarrow B$ (čteme "$A$ právě tehdy, když $B$".quoted.1)
      je pravdivá právě tehdy, když $A$ a zároveň $B$ je pravdivé, nebo když $A$ a zároveň
      $B$ je nepravdivé.
        1:
          index: logické!ekvivalence


.Question:
  solution: $A \land B = \textrm{"jedu metrem a jedu vlakem"}$, $A \lor B = \textrm{"jedu metrem nebo jedu vlakem"}$, $A \Rightarrow B = \textrm{"pokud jedu metrem, pak jedu vlakem"}$, $A \Leftrightarrow B = \textrm{"jedu metrem právě tehdy, když jedu vlakem"}$.

  Pro výroky $A = \textrm{"jedu metrem"}$ a $B = \textrm{"jedu vlakem"}$ řekněte slovně význam $A \land B,
  A \lor B, A \Rightarrow B, A \Leftrightarrow B$.


.Definition:
  title: Pravdivostní tabulka výrokových formulí
  index: výroková formule!pravdivostní tabulka
  labe: def-vyrokova-formule-tabulka

  Další možností pro zjištění, kdy je formule pravdivá, je možné použít "pravdivostní tabulku".notion

    \begin{array}{c|c||c|c|c|c|c}
    A & B & \neg A & A \land B & A \lor B & A \Rightarrow B & A \Leftrightarrow B \\
    \hline
    1 & 1 & 0 & 1 & 1 & 1 & 1 \\
    1 & 0 & 0 & 0 & 1 & 0 & 0 \\
    0 & 1 & 1 & 0 & 1 & 1 & 0 \\
    0 & 0 & 1 & 0 & 0 & 1 & 1
    \end{array}


.Subsection Důkazy
  label: subsec-math-dukazy

Důkazy jsou jedním z nejdůležitějších základů matematiky a filozofie. Představte si, že chcete někoho přesvědčit,
že to co tvrdíte, je skutečně pravda. Jak to uděláte? Své tvrzení dokážete. Jakým způsobem tak provedete, už
je víceméně jedno, důležité pro vás je, aby vaše protistrana uznala, že říkáte pravdu. V této části si představíme
základní důkazové techniky, které můžete použít nejenom v našich teoretických a kombinovaných úlohách.


Ve všech definicích níže uvažujeme, že chceme dokázat tvrzení $B$ a že máme k dispozici nějaká obecná platná tvrzení $A$ (tzv. "předpoklady".notion).
Chceme dokázat implikaci $A \Rightarrow B$.


.Definition:
  title: Přímý důkaz
  label: def-math-dukaz-primy
  index: důkaz!přímý

  Uvažujeme pravdivost výroku $A$, z něhož vyvodíme pravdivost výroku $B$.


.Definition:
  title: Nepřímý důkaz
  label: def-math-dukaz-neprimy
  index: důkaz!nepřímý

  Uvažujeme nepravdivost výroku $B$, z něhož vyvodíme nepravdivost výroku $A$.


.Definition:
  title: Důkaz sporem
  label: def-math-dukaz-sporem
  index: důkaz!sporem

  Uvažujeme pravdivost výroku $A$ a nepravdivost výroku $B$, z nichž vyvodíme obecně nepravdivé tvrzení"tzv. kontradikci či lidově blbost".footnote.


Někdy nám ale tyto možnosti stačit nebudou. Ale například chceme ukázat $\forall x \in \Z \colon p(x)$, můžeme využít tvrzení,
že pokud platí $n$, pak platí i pro $n+1$.


.Definition:
  title: Důkaz indukcí
  label: def-math-dukaz-indukci
  index:
    - důkaz!indukcí
  
  Matematická "indukce".notion je forma důkazu, která využívá možnosti transformace všech.
  Já na to nemám energii teď.
  TODO
  

.Subsection Množiny a množinové operace
  label: subsec-math-mnoziny


.Definition:
  title: Množina
  index: množina

  Množina $M$ je neuspořádaný soubor objektů, zadaný:

  .itemize:

    .item:

      výčtem prvků (např. $M = \{1,2,3,4,5\}$),

    .item:

      charakterizující vlastností, která z univerza $\mathcal{U}$ všech prvků vybere
      jen ty, splňující zadanou vlastnost $p(x)$, zapisujeme:

      .equation:

        M = \{x \in \mathcal{U} \mid p(x)\} = \{x \mid x \in \mathcal{U} \land p(x)\}

      (např. $M = \{x \in \{1,2,3,4,5,6,7,8\} \mid (\exists k \in \{1,2,3,4\})(x = 2 \cdot k)\}$


  Vlastnost, že prvek "$x$ leží v množině $M$".notion.1 zapisujeme $x \in M$, v opačném případě
  píšeme $x \notin M$. "Prázdnou množinu".notion.2, tj. množinu neobsahující žádné prvky
  zapisujeme $\{\}$ nebo také $\emptyset$.
    1:
      index: množina!prvek
    2:
      index: množina!prázdná


S množinami ale chceme pracovat, nějak je upravovat, porovnávat.
Z množiny můžeme chtít třeba vybrat jenom nějaké prvky, například pouze sudá čísla z množiny všech celých čísel ($\Z$).
Této nové množině pak budeme říkat "podmnožina".notion.


.Definition:
  title: Podmnožina
  english: Subset
  label: def-podmnozina
  index: množina!podmnožina

  Buďte $M$, $N$ množiny. $N$ je podmnožinou $M$ právě tehdy, když $\forall x \in N \colon x \in M$.
  Značíme $N \subseteq M$.


  $N$ je "vlastní podmnožinou".notion $M$ pokud $\exists x \in M \colon x \notin N$, značeno $N \subsetneq M$.


  $M$ nazýváme "nadmnožinou".notion.1 $N$, značeno $M \supseteq M$.
    1:
      index: množina!nadmnožina


.Definition:
  title: Rovnost množin
  label: def-mnoziny-rovnost
  index: množina!rovnost

  Buďte $M$, $N$ množiny. $M$ je rovna $N$ právě tehdy, když $M \subseteq N \land N \subseteq M$. 


.Definition:
  title: Sjednocení množin
  english: Union
  label: def-mnoziny-sjednoceni
  index: množina!sjednocení

  Buďte $M$, $N$, $O$ množiny. $O$ je "sjednocením".notion $M$ a $N$ právě tehdy, když $\forall x \in O \colon x \in M \lor x \in N$.
  Značíme $O = M \cup N$.


.Definition:
  title: Průnik množin
  english: Intersection
  label: def-mnoziny-prunik
  index: množina!průnik

  Buďte $M$, $N$, $O$ množiny. $O$ je "průnikem".notion $M$ a $N$ právě tehdy, když $\forall x \in O \colon x \in M \land x \in N$.
  Značíme $O = M \cap N$.


.Definition:
  title: Rozdíl množin 
  label: def-mnoziny-rozdil
  index: množina!průnik

  Buďte $M$, $N$ množiny. Jejich "rozdíl".notion $O = M \setminus N$, je množina pro kterou platí $\forall x \in O \colon x \in M \land x \notin N$.


  "Symetrická diference".notion.1 je jiný druh rozdílu. $O$ je symetrickou diferencí $M$ a $N$ právě tehdy, když $O = (M \cap N) \setminus (M \cup N)$.
  Značíme $O = M \oplus N$.
    1:
      index: množina!symetrická diference


.Definition:
  title: Kartézský součin
  label: def-mnoziny-kartezsky
  index: množina!kartézský součin

  Buďte $M$, $N$ množiny. Jejich "kartézský součin".notion $O = M \times N$, je množina dvojic $\{(x, y)| x \in M \land y \in N\}$.


.Definition:
  title: Doplňek množiny
  english: Complement
  label: def-mnoziny-doplnek
  index: množina!doplněk

  Buď $M$ množina v univerzu $\UU$. Pak její doplněk $\overline{M}$ je podmnožinou $\UU$ a
  $\overline{M} = \{x | x \in \UU \land x \notin M \}$.


.Definition:
  title: Potenční množina
  label: def-mnoziny-potencni
  index: množina!potenční

  Buď $M$ množina, její potenční množinou $\PP(M)$ rozumíme možnu $\{x | x \subseteq M\}$.
  Neboli se jedná o množinu všech podmnožin $M$.


.Subsection Zobrazení a funkce
  label: subsec-math-zobrazeni

.Definition:
  title: Zobrazení / funkce
  index:
    - zobrazení
    - matematická funkce

  Mějme $A, B$ libovolné neprázdné množiny. Podmnožinu kartézského součinu $f \subseteq A \times B$
  takovou, že pro každé $a \in A$ existuje nejvýš jedno $b \in B$ tak, že $(a,b) \in f$
  nazveme "zobrazením z $A$ do $B$".notion (nebo také "funkce".notion).
  Fakt $(a,b) \in f$ zapisujeme $f(a) = b$ a $f \subseteq A \times B$ obdobně $f \colon A \to B$


  Pro $f \colon A \to B$ dále definujeme:

  .itemize:

    .item:

      "Definiční obor".notion.1 $D_f$ zobrazení $f$:
        1:
          index: zobrazení!definiční obor

      .equation:

        D_f := \{a \in A \mid (\exists b \in B)(f(a) =b)\} \subseteq A

    .item:

      "Obor hodnot".notion.1 $H_f$ zobrazení $f$:
        1:
          index: zobrazení!obor hodnot

      .equation:

        H_f := \{b \in B \mid (\exists a \in A)(f(a) = b)\} \subseteq B


  V našem textu budeme uvažovat jenom tzv. "totální zobrazení".notion.1
  $f \colon A \to B$ splňující $A = D_f$.
    1:
      index: zobrazení!totální



.Definition:
  title: Injektivní, surjektivní a bijektivní zobrazení

  Zobrazení $f \colon A \to B$ nazveme "injektivní".notion.1 (nebo také "prosté".notion.2),
  pokud $(\forall x,y \in A)(f(x) = f(y) \Rightarrow x = y)$.
    1:
      index: zobrazení!injektivní
    2:
      index: zobrazení!prosté


  Zobrazení $f \colon A \to B$ nazveme "surjektivní".notion.1 (nebo také "na".notion.2),
  pokud $(\forall y \in B)(\exists x \in A)(f(x) = y)$.
    1:
      index: zobrazení!surjektivní
    2:
      index: zobrazení!na


  Zobrazení $f \colon A \to B$ nazveme "bijektivní".notion.1 (nebo také "bijekcí".notion.2),
  pokud je zároveň surjektivní a injektivní.
    1:
      index: zobrazení!bijektivní
    1:
      index: zobrazení!bijekce


.Question:
  solution: >
    $f$ je zobrazení, protože každý člověk má právě jedno"a tedy nejvýše
    jedno".footnote rodné číslo. Zobrazení je injektivní, protože neexistují dva lidé,
    kteří by měli stejné rodné číslo"zde si představme nereálný svět, ve skutečnosti
    se již párkrát stalo, že dva lidé měli rodné číslo stejné".footnote. O tom jestli
    je zobrazení surjektivní nemají autoři tohoto textu zdání (pokud by bylo, neměli
    by nově narozené děti možnost dostat nové unikátní rodné číslo). V závislosti na
    tom, jestli je zobrazení surjektivní, resp. není, je zobrazení i bijekcí, resp. není.

  Definujme zobrazení $f$, které každému člověku narozenému v České republice přiřadí rodné číslo.
  Je $f$ skutečně zobrazení? Pokud ano, určete definiční obor, obor hodnot a uveďte
  jestli je zobrazení injektivní, surjektivní nebo bijektivní.


.Remark:
  label: rem-odkaz-na-pkm

  Pokud by Vám tento úvod nestačil, nezoufejte můžete se kouknout na "materiály přípravného kurzu matematiky"@1 na FIT ČVUT.
    1:
      link: https://courses.fit.cvut.cz/BI-PKM/materialy.html#studijni_text


.Section Časová složitost
  label: sec-casova-slozitost


Pamětová a časová složitost se běžně udávají jako $\lanO$, $\Omega$ nebo $\Theta$. Co to ale znamená?


.Definition:
  label: def-asymptoticka-horni-mez
  index: mez!asymptotická horní
  title: Asymptotická horní mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky shora omezená $g$ právě tehdy, když existují nějaké konstanty $c > 0$ a $x_0$ takové,
  že pro všechna $x > x_0$ platí nerovnost $|f(x)| \le |c*g(x)|$.


  Značíme $f(x) = \lanO(g(x))$.


.Definition:
  label: def-asymptoticka-dolni-mez
  index: mez!asymptotická dolní
  title: Asymptotická dolní mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky zdola omezená $g$ právě tehdy, když existují nějaké konstanty $c > 0$ a $x_0$ takové,
  že pro všechna $x > x_0$ platí nerovnost $|f(x)| \ge |c*g(x)|$.


  Značíme $f(x) = \Omega(g(x))$.


Pomocí těch, pak můžeme definovat asymptotickou těsnou mez.


.Definition:
  label: def-asymptoticka-tesna-mez
  index: mez!asymptotická těsná
  title: Asymptotická těsná mez

  Mějme dvě funkce $f$ a $g$. $f$ je asymptoticky ekvivalentní $g$ právě tehdy, když
  $f(x) = \lanO(g(x)) \land f(x) = \Omega(g(x))$.


  Značíme $f(x) = \Theta(g(x))$.


.Remark:
  label: rem-asymptotika-mnoziny

  Běžně se lze setkat i s notací $f(x) \in \lanO(g(x))$.
  Pak se $\lanO(g(x))$ považuje za množinu všech funkcí, které jsou asymptoticky shora omezené $g$.


Ukážeme si, jak tyto pojmy líp interpretovat na příkladech.


.Example:
  title: Linární vyhledávání
  label: example-asymptotika-lin-search

  Mějme pole $a$ o $n$ prvcích. Chceme v něm najít $x$. Nejjednodužší způsob jak ho najít je proiterovat
  všechny prvky.

  !pseudocode:

    \PROCEDURE{LinSearch}{$a, n, x$}
      \STATE found = FALSE
      \FOR {$i = 1, \dots, n $ }
        \IF {$a_i == x$}
          \STATE found = \TRUE
        \ENDIF
      \ENDFOR
      \RETURN found
    \ENDPROCEDURE

  Tomuto se říká "lineární vyhledávání".notion.1. To naznačuje, že by algoritmus měl být lineární
  neboli jeho časová složitost je $\lanO(n)$.
    1:
      index: vyhledávání!lineární


  Jak jsme na to ale přišli? Podívejme se pořádně na kód.

  .itemize:

    .item:

      Řádek 2 se provede jenom jednou, přiřazuje se konstanta, takže zatím máme $\lanO(1)$.

    .item:

      Následuje forloop, jehož obsah se provede $n$-krát.

    .item:

      Ve forloopu je jedno porovnání a jedno přiřazení, porovnání se provede vždy $\implies n*\lanO(1) = \lanO(n)$.
      V nejhorším případě bude porovnání vždy pravdivé a přiřazení se provede také vždy. Proto opět $\lanO(n)$.

    .item:

      Pak je jenom return ($\lanO(1)$)

  Výsledná časová složitost je součet všech těchto hodnot $\lanO(1) + \lanO(n) + \lanO(n) + \lanO(1) = \lanO(n)$
  "Důkaz součtu ponecháme jako cvičení pro čtenáře".footnote


.Exercise:
  title: Linární vyhledávání 2
  label: example-asymptotika-lin-search-2

  Máme stále stejný problém, ale trochu si upravíme algoritmus.

  !pseudocode:

    \PROCEDURE{LinSearch2}{$a, n, x$}
      \FOR {$i = 1, \dots, n $ }
        \IF {$a_i == x$}
          \RETURN \TRUE
        \ENDIF
      \ENDFOR
      \RETURN \FALSE
    \ENDPROCEDURE

  Jak se změní časová složitost tohoto algoritmu oproti předchozímu?


.Solution:
  title: Řešení cvičení .reference:example-asymptotika-lin-search-2
  label: sol-asymptotika-lin-search-2

  Nezmění se. V nejhorším případě ($x$ v poli $a$ není) se porovnání opět provede $n$-krát.
  Takže časová složitost zůstane $\lanO(n)$.


Všimněte si, že se v popisu složitosti vyskytuje $n$. Není to jen tak ledajaké $n$ má spojitost
s naším problémem. V tomto případě se jedná o počet prvků v poli. Kdybychom této hodnotě říkali $l$,
bude časová složitost lineárního vyhledávání $\lanO(l)$.


Proč je důležité říkat, co ty písmenka znamenají si ukážeme na příkladu.


.Example:
  label: example-asymptotika-scitani
  title: Sčítání

  Mějme dvě $n$ ciferná čísla $a$ a $b$. Tyto čísla chceme sečíst, použijeme na to algorismus písemného
  sčítání podsebe, který známe ze základní školy.

  .align:
    
    a&\\
    b&\\
    \hline
    c&

  Řekněme si konrétní $a = 12345$ a $b = 00678$.

  .align:

    12345&\\
    00678&\\
    \hline
    13023&

  Museli jsme každou cifru $a$ sečíst s odpovídající cifrou v $b$ a ještě s carry (cifra co přetekla).
  Řekněme, že sečíst dvě cifry je konstatní operace, pak složitost tohoto výpočtu je $\lanO(n)$.


To je celkem pomalé sčítání. Zvládneme to rychleji? Samozřejmě, pokud nebudeme uvažovat délku čísel, ale jeho
hodnotu, pak bude časová složitost sčítání jenom $\lanO(\log_{10}\max(a,b))$. To už vypadá líp. Ale algoritmus je to
pořád stejný. Proto je důležité uvádět na základě čeho složitost uvažujeme.


.Remark:
  label: rem-asymptotika-porovnani
  title: Porovnání horních mezí

  Většinou chceme algoritmus co nejefektivnější (nejmenší časovou složitost). Ukážeme si
  vybrané funkce a seřadíme je tak, že pro každou platí, že je "asymptoticky zhora omezená"#def-asymptoticka-horni-mez
  všemi funkcemi napravo.

  $1, \log n, \sqrt{n}, n, n\log n, n \sqrt{n}, n^2, n^3, 2^n, n!$

  .table:
    columns: l|rrrrrrrrr

    .row:

      $n =$

      $1$

      $10$

      $100$

      $10^4$

      $10^5$

      $10^6$

      $10^7$

      $10^9$

      $10^{12}$

    .row:

      $\lanO(1)$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

      $\SI{150}{ns}$

    .row:

      $\lanO(\log n)$

      $\SI{150}{ns}$

      $\SI{648.29}{ns}$

      $\SI{1.15}{μs}$

      $\SI{2.14}{μs}$

      $\SI{2.64}{μs}$

      $\SI{3.14}{μs}$

      $\SI{3.64}{μs}$

      $\SI{4.63}{μs}$

      $\SI{6.13}{μs}$

    .row:

      $\lanO(\sqrt{n})$

      $\SI{150}{ns}$

      $\SI{474.34}{ns}$

      $\SI{1.50}{μs}$

      $\SI{15}{μs}$

      $\SI{47.43}{μs}$

      $\SI{150}{μs}$

      $\SI{474.34}{μs}$

      $\SI{4.74}{ms}$

      $\SI{150}{ms}$

    .row:

      $\lanO(n)$

      $\SI{150}{ns}$

      $\SI{1.50}{μs}$

      $\SI{15}{μs}$

      $\SI{1.50}{ms}$

      $\SI{15}{ms}$

      $\SI{150}{ms}$

      $\SI{1.50}{s}$

      $\SI{2.50}{min}$

      $\SI{1.74}{d}$

    .row:

      $\lanO(n \log n)$

      $\SI{150}{ns}$

      $\SI{6.48}{μs}$

      $\SI{114.66}{μs}$

      $\SI{21.43}{ms}$

      $\SI{264.14}{ms}$

      $\SI{3.14}{s}$

      $\SI{36.38}{s}$

      $\SI{1.29}{h}$

      $\SI{70.94}{d}$

    .row:

      $\lanO(n \sqrt{n})$

      $\SI{150}{ns}$

      $\SI{4.74}{μs}$

      $\SI{150}{μs}$

      $\SI{150}{ms}$

      $\SI{4.74}{s}$

      $\SI{2.50}{min}$

      $\SI{1.32}{h}$

      $\SI{54.90}{d}$

      $\SI{4.76}{ky}$

    .row:

      $\lanO(n^2)$

      $\SI{150}{ns}$

      $\SI{15}{μs}$

      $\SI{1.50}{ms}$

      $\SI{15}{s}$

      $\SI{25}{min}$

      $\SI{1.74}{d}$

      $\SI{173.61}{d}$

      $\SI{4.76}{ky}$

      $\SI{4.76}{Gy}$

    .row:

      $\lanO(n^3)$

      $\SI{150}{ns}$

      $\SI{150}{μs}$

      $\SI{150}{ms}$

      $\SI{1.74}{d}$

      $\SI{4.76}{y}$

      $\SI{4.76}{ky}$

      $\SI{4.76}{My}$

      $\SI{1.05}{VZ}$

      $\SI{345009160.96}{VV}$

    .row:

      $\lanO(2^n)$

      $\SI{300}{ns}$

      $\SI{153.60}{μs}$

      $\SI{437.35}{VV}$

      $\SI{6.88E2982}{VV}$

      moc

      moc

      moc

      moc

      moc

    .row:

      $\lanO(n!)$

      $\SI{150}{ns}$

      $\SI{544.32}{ms}$

      $\SI{3.22E130}{VV}$

      $\SI{9.82E35631}{VV}$

      moc

      moc

      moc

      moc

      moc

  "VZ".emphasize a "VV".emphasize znamená věk země respektive vesmíru. A "moc".quoted, že můj počítač odmítal to číslo spočítat.
  A ano "ky".emphasize, "My".emphasize a "Gy".emphasize jsou kilo-, mega-, a gigaroky.


.Section Paměťová složitost
  label: sec-pametova-slozitost

Do teď jsme se bavili o složitosti časové, ale na začátku kapitoly jsme zmiňovali i paměťovou složitost.
Pojďme se na ní kouknout podrobněji.


Stejně jako u složitosti časové nás většinou nezajímá kolik přesně paměti algoritmus zabere, ale spíše je
pro nás důležité jaký vztah má využití paměti v závislosti na vstupu. To se opět vyjadřuje pomocí asymptotických mezí
"$\lanO$"#def-asymptoticka-horni-mez, "$\Omega$"#def-asymptoticka-dolni-mez a "$\Theta$"#def-asymptoticka-tesna-mez.


Stejně jako u časové složitosti vyjadřujeme paměťovou složitost jako závislost na vstupu. A opět záleží, co jako vstup použijeme.


.Example:
  label: example-pametova-slozitost-matice
  title: Sčítání matic

  Mějme na vstupu dvě matice velikosti $n×n$ $\mA$ a $\mB$. Tyto dvě matice chceme sečíst. "Pokud nevíte, co jsou matice
  zatím si je můžete představit jako mřížky s čísly a jejich sčítání tak, že číslo na pozici $i,j$ v matici $\mA$ sečtu
  s číslem na pozici $i,j$ v matici $\mB$. Nebo koukněte na "wikipedii".reference.1.".footnote
    1:
      link: https://cs.wikipedia.org/wiki/S%C4%8D%C3%ADt%C3%A1n%C3%AD_matic


  Paměťová složitost jednoduchého součtu bude $\lanO(1)$. Protože využijeme jenom paměť na uložení výsledku.


  Ale také by se dala uvézt jako $\lanO(n^2)$, což vypadá mnohem hůř, ale také je to správně. V tomto případě
  totiž nevzahujeme využitou paměť k velikosti vstupu, ale k nějaké jeho vlastnosti. I při tomto přístupu se však
  můžeme setkat s tím, že by byla paměťová složitost označena za $\lanO(1)$ a to proto, že se uvažuje pouze paměť
  využitá navíc oproti velikosti vstupu a výstupu.


Časová a paměťová složitost jsou tedy dvě vlastnosti algoritmu. A nastává logická otázka, mají spolu něco společného?
Ze znalosti jedné vlastnosti toho moc o druhé říci nemůžeme. Ale aspoň nějakou spojitost mají.


.Theorem:
  title: Vztah časové a paměťové složitosti
  label: thm-cas-vs-pamet-slozitost

  Paměťová složitost algoritmu je shora omezená složitostí časovou.


.Proof:
  title: Důkaz věty .reference:thm-cas-vs-pamet-slozitost
  label: proof-cas-vs-pamet-slozitost

  Celkem přímočarý a intuitivní. Za čas $t$ nemohu použít víc jak $\lanO(t)$ paměťových buněk.




% Snad tohle jako přiblížení počítání složistosti pomohlo.


